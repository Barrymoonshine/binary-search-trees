(()=>{"use strict";const l=t=>{const e=t.length,n=Math.round(e/2),r=t.slice(0,n),u=t.slice(n,e);return e<=1?t:((l,t)=>{const e=[];for(;l.length&&t.length;)l[0]<t[0]?e.push(l.shift()):e.push(t.shift());return[...e,...l,...t]})(l(r),l(u))},t=(l,t=null,e=null)=>({data:l,left:t,right:e}),e=(l,t="",n=!0)=>{null!==l&&(null!==l.right&&e(l.right,`${t}${n?"│   ":"    "}`,!1),console.log(`${t}${n?"└── ":"┌── "}${l.data}`),null!==l.left&&e(l.left,`${t}${n?"    ":"│   "}`,!0))};let n=null;const r=(l,e,n)=>{if(e>n)return null;const u=parseInt((e+n)/2),i=t(l[u]);return i.left=r(l,e,u-1),i.right=r(l,u+1,n),i},u=(l,e)=>{null===e&&(n=t(l)),e.data===l?console.log("Error, data already exists in tree"):e.data>l?null!==e.left?u(l,e.left):e.left=t(l):null!==e.right?u(l,e.right):e.right=t(l)},i=l=>{if(null===l.left)return l;i(l.left)},f=(l,t)=>{if(null===t)return console.log("Error, no data present in the tree"),null;if(t.data>l&&null!==t.left)t.left=f(l,t.left);else if(t.data<l&&null!==t.right)t.right=f(l,t.right);else if(t.data===l)if(null!==t.left&&null!==t.right){const l=i(t.right);t.data=l,t.right=f(l,t.right)}else{if(null!==t.left&&null===t.right)return t.left;if(null===t.left&&null!==t.right)return t.right;if(null===t.left&&null===t.right)return null}return t},h=[1,7,4,23,8,9,4,3,5,7,9,67,6345,324],s=h.length-1,g=(l=>{const t=[];return l.forEach((l=>{t.includes(l)||t.push(l)})),t})(l(h));n=r(g,0,s),console.log(n),u(10,n),e(n),f(10,n),e(n)})();
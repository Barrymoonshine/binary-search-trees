(()=>{"use strict";const l=t=>{const n=t.length,e=Math.round(n/2),r=t.slice(0,e),u=t.slice(e,n);return n<=1?t:((l,t)=>{const n=[];for(;l.length&&t.length;)l[0]<t[0]?n.push(l.shift()):n.push(t.shift());return[...n,...l,...t]})(l(r),l(u))},t=(l,t=null,n=null)=>({data:l,left:t,right:n}),n=(l,t="",e=!0)=>{null!==l&&(null!==l.right&&n(l.right,`${t}${e?"│   ":"    "}`,!1),console.log(`${t}${e?"└── ":"┌── "}${l.data}`),null!==l.left&&n(l.left,`${t}${e?"    ":"│   "}`,!0))};let e=null;const r=(l,n,e)=>{if(n>e)return null;const u=parseInt((n+e)/2),i=t(l[u]);return i.left=r(l,n,u-1),i.right=r(l,u+1,e),i},u=(l,n)=>{null===n&&(e=t(l)),n.data===l?console.log("Error, data already exists in tree"):n.data>l?null!==n.left?u(l,n.left):n.left=t(l):null!==n.right?u(l,n.right):n.right=t(l)},i=l=>{if(null===l.left)return l;i(l.left)},h=(l,t)=>{if(null===t)return console.log("Error, no data present in the tree"),null;if(t.data>l&&null!==t.left)t.left=h(l,t.left);else if(t.data<l&&null!==t.right)t.right=h(l,t.right);else if(t.data===l)if(null!==t.left&&null!==t.right){const l=i(t.right);t.data=l,t.right=h(l,t.right)}else{if(null!==t.left&&null===t.right)return t.left;if(null===t.left&&null!==t.right)return t.right;if(null===t.left&&null===t.right)return null}return t},f=[1,7,4,23,8,9,4,3,5,7,9,67,6345,324],s=f.length-1,g=(l=>{const t=[];return l.forEach((l=>{t.includes(l)||t.push(l)})),t})(l(f));e=r(g,0,s),u(10,e),h(10,e),n(e),console.log((l=>{if(null===l)return[];const t=[l],n=[];for(;0!==t.length;){const l=t.shift();n.push(l.data),l.left&&t.push(l.left),l.right&&t.push(l.right)}return n})(e))})();
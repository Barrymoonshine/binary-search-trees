(()=>{"use strict";const t=l=>{const n=l.length,e=Math.round(n/2),r=l.slice(0,e),u=l.slice(e,n);return n<=1?l:((t,l)=>{const n=[];for(;t.length&&l.length;)t[0]<l[0]?n.push(t.shift()):n.push(l.shift());return[...n,...t,...l]})(t(r),t(u))},l=(t,l=null,n=null)=>({data:t,left:l,right:n}),n=(t,l="",e=!0)=>{null!==t&&(null!==t.right&&n(t.right,`${l}${e?"│   ":"    "}`,!1),console.log(`${l}${e?"└── ":"┌── "}${t.data}`),null!==t.left&&n(t.left,`${l}${e?"    ":"│   "}`,!0))};let e=null;const r=(t,n,e)=>{if(n>e)return null;const u=parseInt((n+e)/2),i=l(t[u]);return i.left=r(t,n,u-1),i.right=r(t,u+1,e),i},u=(t,n)=>{null===n&&(e=l(t)),n.data===t?console.log("Error, data already exists in tree"):n.data>t?null!==n.left?u(t,n.left):n.left=l(t):null!==n.right?u(t,n.right):n.right=l(t)},i=t=>{if(null===t.left)return t;i(t.left)},f=(t,l)=>{if(null===l)return console.log("Error, no data present in the tree"),null;if(l.data>t&&null!==l.left)l.left=f(t,l.left);else if(l.data<t&&null!==l.right)l.right=f(t,l.right);else if(l.data===t)if(null!==l.left&&null!==l.right){const t=i(l.right);l.data=t,l.right=f(t,l.right)}else{if(null!==l.left&&null===l.right)return l.left;if(null===l.left&&null!==l.right)return l.right;if(null===l.left&&null===l.right)return null}return l},h=t=>{if(null!==t.data&&void 0!==t.data)return t.data},s=[1,7,4,23,8,9,4,3,5,7,9,67,6345,324],a=s.length-1,g=(t=>{const l=[];return t.forEach((t=>{l.includes(t)||l.push(t)})),l})(t(s));e=r(g,0,a),u(10,e),f(10,e),n(e),console.log(((t,l)=>{if(null===t)return[];const n=[],e=[t];for(;0!==e.length;){const t=e.shift();n[n.length]=h(t),t.left&&e.push(t.left),t.right&&e.push(t.right)}return n})(e))})();